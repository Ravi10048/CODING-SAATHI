# -*- coding: utf-8 -*-
"""Level1_task3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qlOINfAfsv34NavF-jUwkOL4d0YbmJK0

#Import Modules
"""

import numpy as np
import pandas as pd
import difflib    # to get closet match if user enter wrong data
from sklearn.feature_extraction.text import TfidfVectorizer # used to convert text /string(title,director) into numeric value
from sklearn.metrics.pairwise import cosine_similarity # to find the similarity beteen data by using similarity score

"""#Loading the dataset"""

music_data = pd.read_csv('music1.csv')

# printing the first 5 rows of the dataframe
print(music_data.head())

# number of rows and columns in the data frame
print(music_data.shape)

"""#Data Pre-Processing"""

# selecting the relevant features for recommendation  # track_name
selected_features = ['track_id','artists','album_name','popularity','duration_ms','danceability','energy','mode','track_genre','liveness']
print(selected_features)

# replacing the null valuess with null string

for feature in selected_features:
  music_data[feature] = music_data[feature].fillna('') # filling null value with empty string


# combining all the 10 selected features
combined_features = music_data['track_id']+' '+music_data['artists']+' '+music_data['album_name']+' '+music_data['track_genre']

# music_data['popularity']+' '+music_data['duration_ms']+' '+music_data['danceability']+' '+music_data['energy']+' '+' '+music_data['mode']++' '+music_data['liveness']
print(combined_features)

#important  converting the text data to feature vectors(numerical value)
vectorizer = TfidfVectorizer()
feature_vectors = vectorizer.fit_transform(combined_features)
print(feature_vectors)

"""#Finding the similarity scores using cosine similarity """

#important getting the similarity scores using cosine similarity is distance metric use to measure how much two string/valuse match
similarity = cosine_similarity(feature_vectors)
print(similarity) # compare itself to every other
print(similarity.shape)

"""##Music Recommendation Sytem"""

music_name = input(' Enter your favourite music name : ')
#Enter your favourite music name : Can't Help Falling In Love

# creating a list with all the music names given in the dataset
list_of_all_titles = music_data['track_name'].tolist()
# print(list_of_all_titles)

#finding the close match for the music name given by the user
find_close_match = difflib.get_close_matches(music_name, list_of_all_titles)
# print(find_close_match) 

close_match = find_close_match[0]
# print(close_match) # Can't Help Falling In Love


# finding the index of the music with title
index_of_the_music = music_data[music_data.track_name == close_match]['index'].values[0]
# print(index_of_the_music) # this done because we need to find similarity with index no.

# getting a list of similar music track
similarity_score = list(enumerate(similarity[index_of_the_music])) # enumerate - loop
# print(similarity_score)# (index,similarity score)
# len(similarity_score)

# sorting the music based on their similarity score
sorted_similar_musics = sorted(similarity_score, key = lambda x:x[1], reverse = True) # sorting by 2nd value
# print(sorted_similar_musics)

# print the name of similar musics based on the index

if(len(sorted_similar_musics)!=0):
  print('\n Music suggested for you : \n')

  i = 1
  for music in sorted_similar_musics:
    index = music[0]
    title_from_index = music_data[music_data.index==index]['track_name'].values[0]
    artist_from_index = music_data[music_data.index==index]['artists'].values[0]
    album_from_index = music_data[music_data.index==index]['album_name'].values[0]
    if (i<30):
      print(i, '.',title_from_index,'-',artist_from_index,'-',album_from_index)
      i+=1
else:
  print("No music found ,try again")