# -*- coding: utf-8 -*-
"""Level2_task2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PX_giS7DDqG_CO20g-hqd1ObMYI383yv

# Import modules
"""

import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix, accuracy_score
import numpy as np

"""#Loading the dataset"""

data=pd.read_csv('iris.csv')
X=data.iloc[:,:-1]
Y=data.iloc[:,-1]
data.info()
data.head()

"""#Visualization by graph"""

fig = data[data.Species == 'Iris-setosa'].plot(kind='scatter', x='SepalLengthCm', y='SepalWidthCm', color='green', label='Setosa')
data[data.Species == 'Iris-versicolor'].plot(kind='scatter', x='SepalLengthCm', y='SepalWidthCm', color='orange', label='Versicolor', ax=fig)
data[data.Species == 'Iris-virginica'].plot(kind='scatter', x='SepalLengthCm', y='SepalWidthCm', color='blue', label='Virginica', ax=fig)

fig.set_xlabel('Sepal Length')
fig.set_ylabel('Sepal Width')
fig.set_title('Sepal Length Vs Sepal  Width')

fig=plt.gcf()
fig.set_size_inches(8, 5)
plt.show()


fig = data[data.Species == 'Iris-setosa'].plot(kind='scatter', x='PetalLengthCm', y='PetalWidthCm', color='green', label='Setosa')
data[data.Species == 'Iris-versicolor'].plot(kind='scatter', x='PetalLengthCm', y='PetalWidthCm', color='orange', label='Versicolor', ax=fig)
data[data.Species == 'Iris-virginica'].plot(kind='scatter', x='PetalLengthCm', y='PetalWidthCm', color='blue', label='Virginica', ax=fig)

fig.set_xlabel('Petal Length')
fig.set_ylabel('Petal Width')
fig.set_title('Petal Length Vs Petal Width')

fig=plt.gcf()
fig.set_size_inches(8, 5)
plt.show()
plt.savefig('Petal_LengthVsWidth.jpeg')

#violinplot

plt.figure(figsize=(12,6))
plt.subplot(2,2,1)
sns.violinplot(x='Species', y = 'SepalLengthCm', data=data)
plt.subplot(2,2,2)
sns.violinplot(x='Species', y = 'SepalWidthCm', data=data)

plt.subplot(2,2,3)
sns.violinplot(x='Species', y = 'PetalLengthCm', data=data)
plt.subplot(2,2,4)
sns.violinplot(x='Species', y = 'PetalWidthCm', data=data)

plt.show()

"""#Split the dataset into training and testing sets"""

X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.3, random_state=1)

"""#Train a Decision Tree Classifier model"""

model = DecisionTreeClassifier(random_state=1)
model.fit(X_train, y_train)

"""# Visualize the Decision Tree

"""

import graphviz
from sklearn import tree
from IPython.display import display
iris = load_iris()
X=iris.data
Y=iris.target
dot_data = tree.export_graphviz(model, out_file=None, 
                      feature_names=['SepalLengthCm','SepalWidthCm','PetalLengthCm','PetalWidthCm'],  
                      class_names=['setosa','versicolor','virginica'],  
                      filled=True, rounded=True,  
                      special_characters=True)  
graph = graphviz.Source(dot_data) 
graph.render("iris_decision_tree")
display(graph)

"""#Make predictions on the testing set"""

y_pred = model.predict(X_test)

"""#Compute the confusion matrix"""

cm = confusion_matrix(y_test, y_pred)
# Compute the accuracy score
acc = accuracy_score(y_test, y_pred)
print("Accuracy Score:", acc)

"""#Visualize the confusion matrix"""

target_names=['setosa','versicolor','virginica']
sns.heatmap(cm, annot=True, cmap='Blues', fmt='g', xticklabels=['setosa','versicolor','virginica'], yticklabels=['setosa','versicolor','virginica'])
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

"""#Testing for a new data"""

# Testing the model on Other value
y_pred=model.predict([data.iloc[100,:-1].values])
y_true=data.iloc[100,-1]
print('True class label:- ',y_true)
print('Predicted class label:- ',y_pred[0])